version: '3.8'

services:
  # LKS Network Blockchain Node
  lks-node:
    build:
      context: ../src/LksBrothers.Node
      dockerfile: Dockerfile
    container_name: lks-node
    restart: unless-stopped
    ports:
      - "8545:8545"  # JSON-RPC
      - "8546:8546"  # WebSocket
      - "30303:30303" # P2P
    volumes:
      - lks-node-data:/data
      - ./config/node.toml:/config/node.toml:ro
    environment:
      - NODE_ENV=production
      - CHAIN_ID=1337
      - NETWORK_ID=1337
      - DATA_DIR=/data
      - CONFIG_FILE=/config/node.toml
    networks:
      - lks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SQL Server Database
  lks-database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: lks-database
    restart: unless-stopped
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=Express
    volumes:
      - lks-db-data:/var/opt/mssql
      - ../database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    networks:
      - lks-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_PASSWORD} -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  lks-api:
    build:
      context: ../
      dockerfile: Dockerfile.api
    container_name: lks-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_SERVER=lks-database
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=LKSNetwork
      - LKS_NODE_URL=http://lks-node:8545
      - LKS_COIN_CONTRACT=${LKS_COIN_CONTRACT}
      - PAYMENT_SYSTEM_CONTRACT=${PAYMENT_SYSTEM_CONTRACT}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      - lks-database
      - lks-node
    networks:
      - lks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # .NET Core Explorer
  lks-explorer:
    build:
      context: ../src/LksBrothers.Explorer
      dockerfile: Dockerfile
    container_name: lks-explorer
    restart: unless-stopped
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__LKSDatabase=Server=lks-database;Database=LKSNetwork;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=true;
      - LKSNetwork__NodeUrl=http://lks-node:8545
      - LKSNetwork__ChainId=1337
      - LKSNetwork__LKSCoinContract=${LKS_COIN_CONTRACT}
      - LKSNetwork__PaymentSystemContract=${PAYMENT_SYSTEM_CONTRACT}
      - JWT__Key=${JWT_SECRET}
      - JWT__Issuer=lks-network.com
      - JWT__Audience=lks-network.com
    depends_on:
      - lks-database
      - lks-node
      - lks-api
    networks:
      - lks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: lks-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - lks-explorer
      - lks-api
    networks:
      - lks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lks-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - lks-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lks-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lks-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lks-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - lks-network

volumes:
  lks-node-data:
  lks-db-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  lks-network:
    driver: bridge
